// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: workouts.sql

package repository

import (
	"context"
)

const completeWorkoutById = `-- name: CompleteWorkoutById :execrows
UPDATE workouts 
SET completed_on = ?1, updated_on = ?2
WHERE id = ?3
AND user_id = ?4
`

type CompleteWorkoutByIdParams struct {
	CompletedOn interface{} `json:"completed_on"`
	UpdatedOn   string      `json:"updated_on"`
	ID          string      `json:"id"`
	UserID      string      `json:"user_id"`
}

func (q *Queries) CompleteWorkoutById(ctx context.Context, arg CompleteWorkoutByIdParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, completeWorkoutById,
		arg.CompletedOn,
		arg.UpdatedOn,
		arg.ID,
		arg.UserID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const createWorkoutAndReturnId = `-- name: CreateWorkoutAndReturnId :one
INSERT INTO workouts (
  id, name, created_on, updated_on, user_id
) VALUES (
  ?1, ?2, ?3, ?4, ?5
)
RETURNING id
`

type CreateWorkoutAndReturnIdParams struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	CreatedOn string `json:"created_on"`
	UpdatedOn string `json:"updated_on"`
	UserID    string `json:"user_id"`
}

func (q *Queries) CreateWorkoutAndReturnId(ctx context.Context, arg CreateWorkoutAndReturnIdParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createWorkoutAndReturnId,
		arg.ID,
		arg.Name,
		arg.CreatedOn,
		arg.UpdatedOn,
		arg.UserID,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteWorkoutById = `-- name: DeleteWorkoutById :execrows
DELETE FROM workouts
WHERE id = ?1
AND user_id = ?2
`

type DeleteWorkoutByIdParams struct {
	ID     string `json:"id"`
	UserID string `json:"user_id"`
}

func (q *Queries) DeleteWorkoutById(ctx context.Context, arg DeleteWorkoutByIdParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteWorkoutById, arg.ID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAllWorkouts = `-- name: GetAllWorkouts :many
SELECT id, name, completed_on, created_on, updated_on, user_id, note FROM workouts 
WHERE user_id = ?1
ORDER BY id DESC
LIMIT ?3 OFFSET ?2
`

type GetAllWorkoutsParams struct {
	UserID string `json:"user_id"`
	Offset int64  `json:"offset"`
	Limit  int64  `json:"limit"`
}

func (q *Queries) GetAllWorkouts(ctx context.Context, arg GetAllWorkoutsParams) ([]Workout, error) {
	rows, err := q.db.QueryContext(ctx, getAllWorkouts, arg.UserID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Workout{}
	for rows.Next() {
		var i Workout
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CompletedOn,
			&i.CreatedOn,
			&i.UpdatedOn,
			&i.UserID,
			&i.Note,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllWorkoutsCount = `-- name: GetAllWorkoutsCount :one
SELECT count(*) FROM workouts 
WHERE user_id = ?1
`

func (q *Queries) GetAllWorkoutsCount(ctx context.Context, userID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAllWorkoutsCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getWorkoutById = `-- name: GetWorkoutById :one
SELECT id, name, completed_on, created_on, updated_on, user_id, note FROM workouts 
WHERE id = ?1
AND user_id = ?2
`

type GetWorkoutByIdParams struct {
	ID     string `json:"id"`
	UserID string `json:"user_id"`
}

func (q *Queries) GetWorkoutById(ctx context.Context, arg GetWorkoutByIdParams) (Workout, error) {
	row := q.db.QueryRowContext(ctx, getWorkoutById, arg.ID, arg.UserID)
	var i Workout
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CompletedOn,
		&i.CreatedOn,
		&i.UpdatedOn,
		&i.UserID,
		&i.Note,
	)
	return i, err
}

const updateWorkoutById = `-- name: UpdateWorkoutById :execrows
UPDATE workouts
SET note = ?1, updated_on = ?2
WHERE id = ?3
AND user_id = ?4
`

type UpdateWorkoutByIdParams struct {
	Note      interface{} `json:"note"`
	UpdatedOn string      `json:"updated_on"`
	ID        string      `json:"id"`
	UserID    string      `json:"user_id"`
}

func (q *Queries) UpdateWorkoutById(ctx context.Context, arg UpdateWorkoutByIdParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateWorkoutById,
		arg.Note,
		arg.UpdatedOn,
		arg.ID,
		arg.UserID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
