// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: exercises.sql

package repository

import (
	"context"
)

const createExerciseAndReturnId = `-- name: CreateExerciseAndReturnId :one
INSERT INTO exercises (
  id, name, workout_id, exercise_type_id, created_on, updated_on, user_id
) VALUES (
  ?1, ?2, ?3, ?4, ?5, ?6, ?7
)
RETURNING id
`

type CreateExerciseAndReturnIdParams struct {
	ID             string `json:"id"`
	Name           string `json:"name"`
	WorkoutID      string `json:"workout_id"`
	ExerciseTypeID string `json:"exercise_type_id"`
	CreatedOn      string `json:"created_on"`
	UpdatedOn      string `json:"updated_on"`
	UserID         string `json:"user_id"`
}

func (q *Queries) CreateExerciseAndReturnId(ctx context.Context, arg CreateExerciseAndReturnIdParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createExerciseAndReturnId,
		arg.ID,
		arg.Name,
		arg.WorkoutID,
		arg.ExerciseTypeID,
		arg.CreatedOn,
		arg.UpdatedOn,
		arg.UserID,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteExerciseById = `-- name: DeleteExerciseById :execrows
DELETE FROM exercises 
WHERE id = ?1
AND user_id = ?2
`

type DeleteExerciseByIdParams struct {
	ID     string `json:"id"`
	UserID string `json:"user_id"`
}

func (q *Queries) DeleteExerciseById(ctx context.Context, arg DeleteExerciseByIdParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteExerciseById, arg.ID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAllExercises = `-- name: GetAllExercises :many
SELECT id, name, created_on, updated_on, user_id, workout_id, exercise_type_id, "foreign" FROM exercises 
WHERE user_id = ?1
ORDER by id
`

func (q *Queries) GetAllExercises(ctx context.Context, userID string) ([]Exercise, error) {
	rows, err := q.db.QueryContext(ctx, getAllExercises, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Exercise{}
	for rows.Next() {
		var i Exercise
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedOn,
			&i.UpdatedOn,
			&i.UserID,
			&i.WorkoutID,
			&i.ExerciseTypeID,
			&i.Foreign,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExerciseById = `-- name: GetExerciseById :one
SELECT id, name, created_on, updated_on, user_id, workout_id, exercise_type_id, "foreign" FROM exercises 
WHERE id = ?1
AND user_id = ?2
`

type GetExerciseByIdParams struct {
	ID     string `json:"id"`
	UserID string `json:"user_id"`
}

func (q *Queries) GetExerciseById(ctx context.Context, arg GetExerciseByIdParams) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, getExerciseById, arg.ID, arg.UserID)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedOn,
		&i.UpdatedOn,
		&i.UserID,
		&i.WorkoutID,
		&i.ExerciseTypeID,
		&i.Foreign,
	)
	return i, err
}

const getExercisesByWorkoutId = `-- name: GetExercisesByWorkoutId :many
SELECT id, name, created_on, updated_on, user_id, workout_id, exercise_type_id, "foreign" FROM exercises
WHERE workout_id = ?1
AND user_id = ?2
`

type GetExercisesByWorkoutIdParams struct {
	WorkoutID string `json:"workout_id"`
	UserID    string `json:"user_id"`
}

func (q *Queries) GetExercisesByWorkoutId(ctx context.Context, arg GetExercisesByWorkoutIdParams) ([]Exercise, error) {
	rows, err := q.db.QueryContext(ctx, getExercisesByWorkoutId, arg.WorkoutID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Exercise{}
	for rows.Next() {
		var i Exercise
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedOn,
			&i.UpdatedOn,
			&i.UserID,
			&i.WorkoutID,
			&i.ExerciseTypeID,
			&i.Foreign,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
