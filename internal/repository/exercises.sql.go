// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: exercises.sql

package repository

import (
	"context"
)

const countAllExercises = `-- name: CountAllExercises :one
SELECT COUNT(*) from exercises
`

func (q *Queries) CountAllExercises(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countAllExercises)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAllExercises = `-- name: GetAllExercises :many
SELECT id, name, workout_id, exercise_type_id FROM exercises 
ORDER by id
`

func (q *Queries) GetAllExercises(ctx context.Context) ([]Exercise, error) {
	rows, err := q.db.QueryContext(ctx, getAllExercises)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Exercise
	for rows.Next() {
		var i Exercise
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.WorkoutID,
			&i.ExerciseTypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExerciseById = `-- name: GetExerciseById :one
SELECT id, name, workout_id, exercise_type_id FROM exercises 
WHERE id = ?1
`

func (q *Queries) GetExerciseById(ctx context.Context, id string) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, getExerciseById, id)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.WorkoutID,
		&i.ExerciseTypeID,
	)
	return i, err
}
