// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: exercise-types.sql

package repository

import (
	"context"
)

const createExerciseTypeAndReturnId = `-- name: CreateExerciseTypeAndReturnId :one
INSERT INTO exercise_types (
  id, name, created_on, updated_on, user_id
) VALUES (
  ?1, ?2, ?3, ?4, ?5
)
RETURNING id
`

type CreateExerciseTypeAndReturnIdParams struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	CreatedOn string `json:"created_on"`
	UpdatedOn string `json:"updated_on"`
	UserID    string `json:"user_id"`
}

func (q *Queries) CreateExerciseTypeAndReturnId(ctx context.Context, arg CreateExerciseTypeAndReturnIdParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createExerciseTypeAndReturnId,
		arg.ID,
		arg.Name,
		arg.CreatedOn,
		arg.UpdatedOn,
		arg.UserID,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteExerciseTypeById = `-- name: DeleteExerciseTypeById :execrows
DELETE FROM exercise_types
WHERE id = ?1
AND user_id = ?2
`

type DeleteExerciseTypeByIdParams struct {
	ID     string `json:"id"`
	UserID string `json:"user_id"`
}

func (q *Queries) DeleteExerciseTypeById(ctx context.Context, arg DeleteExerciseTypeByIdParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteExerciseTypeById, arg.ID, arg.UserID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAllExerciseTypes = `-- name: GetAllExerciseTypes :many
SELECT id, name, created_on, updated_on, user_id FROM exercise_types 
WHERE user_id = ?1
ORDER by id asc
`

func (q *Queries) GetAllExerciseTypes(ctx context.Context, userID string) ([]ExerciseType, error) {
	rows, err := q.db.QueryContext(ctx, getAllExerciseTypes, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ExerciseType{}
	for rows.Next() {
		var i ExerciseType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedOn,
			&i.UpdatedOn,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExerciseTypeById = `-- name: GetExerciseTypeById :one
SELECT id, name, created_on, updated_on, user_id FROM exercise_types 
WHERE id = ?1
AND user_id = ?2
`

type GetExerciseTypeByIdParams struct {
	ID     string `json:"id"`
	UserID string `json:"user_id"`
}

func (q *Queries) GetExerciseTypeById(ctx context.Context, arg GetExerciseTypeByIdParams) (ExerciseType, error) {
	row := q.db.QueryRowContext(ctx, getExerciseTypeById, arg.ID, arg.UserID)
	var i ExerciseType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedOn,
		&i.UpdatedOn,
		&i.UserID,
	)
	return i, err
}

const getLastWeightRepsByExerciseTypeId = `-- name: GetLastWeightRepsByExerciseTypeId :one
SELECT s.repetitions, s.weight FROM exercises e
JOIN sets s ON s.exercise_id = e.id
JOIN workouts w ON e.workout_id = w.id
WHERE exercise_type_id = ?1 
AND s.user_id = ?2
AND w.completed_on IS NOT NULL
ORDER BY s.id desc LIMIT 1
`

type GetLastWeightRepsByExerciseTypeIdParams struct {
	ID     string `json:"id"`
	UserID string `json:"user_id"`
}

type GetLastWeightRepsByExerciseTypeIdRow struct {
	Repetitions int64   `json:"repetitions"`
	Weight      float64 `json:"weight"`
}

func (q *Queries) GetLastWeightRepsByExerciseTypeId(ctx context.Context, arg GetLastWeightRepsByExerciseTypeIdParams) (GetLastWeightRepsByExerciseTypeIdRow, error) {
	row := q.db.QueryRowContext(ctx, getLastWeightRepsByExerciseTypeId, arg.ID, arg.UserID)
	var i GetLastWeightRepsByExerciseTypeIdRow
	err := row.Scan(&i.Repetitions, &i.Weight)
	return i, err
}

const getMaxWeightRepsByExerciseTypeId = `-- name: GetMaxWeightRepsByExerciseTypeId :one
SELECT s.weight as weight, Max(s.repetitions) as repetitions FROM exercises e
JOIN sets s ON s.exercise_id = e.id
WHERE e.exercise_type_id = ?1 AND s.user_id = ?2
AND s.weight = (SELECT Max(s.weight) as weight FROM exercises e
JOIN sets s ON s.exercise_id = e.id
WHERE e.exercise_type_id = ?1 AND s.user_id = ?2)
`

type GetMaxWeightRepsByExerciseTypeIdParams struct {
	ID     string `json:"id"`
	UserID string `json:"user_id"`
}

type GetMaxWeightRepsByExerciseTypeIdRow struct {
	Weight      float64     `json:"weight"`
	Repetitions interface{} `json:"repetitions"`
}

func (q *Queries) GetMaxWeightRepsByExerciseTypeId(ctx context.Context, arg GetMaxWeightRepsByExerciseTypeIdParams) (GetMaxWeightRepsByExerciseTypeIdRow, error) {
	row := q.db.QueryRowContext(ctx, getMaxWeightRepsByExerciseTypeId, arg.ID, arg.UserID)
	var i GetMaxWeightRepsByExerciseTypeIdRow
	err := row.Scan(&i.Weight, &i.Repetitions)
	return i, err
}
