// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: exercise-types.sql

package repository

import (
	"context"
)

const createExerciseTypeAndReturnId = `-- name: CreateExerciseTypeAndReturnId :one
INSERT INTO exercise_types (
  id, name, created_on, updated_on
) VALUES (
  ?1, ?2, ?3, ?4
)
RETURNING id
`

type CreateExerciseTypeAndReturnIdParams struct {
	ID        string `json:"id"`
	Name      string `json:"name"`
	CreatedOn string `json:"created_on"`
	UpdatedOn string `json:"updated_on"`
}

func (q *Queries) CreateExerciseTypeAndReturnId(ctx context.Context, arg CreateExerciseTypeAndReturnIdParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createExerciseTypeAndReturnId,
		arg.ID,
		arg.Name,
		arg.CreatedOn,
		arg.UpdatedOn,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteExerciseTypeById = `-- name: DeleteExerciseTypeById :execrows
DELETE FROM exercise_types
WHERE id = ?1
`

func (q *Queries) DeleteExerciseTypeById(ctx context.Context, id string) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteExerciseTypeById, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAllExerciseTypes = `-- name: GetAllExerciseTypes :many
SELECT id, name, created_on, updated_on FROM exercise_types 
ORDER by id asc
`

func (q *Queries) GetAllExerciseTypes(ctx context.Context) ([]ExerciseType, error) {
	rows, err := q.db.QueryContext(ctx, getAllExerciseTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ExerciseType{}
	for rows.Next() {
		var i ExerciseType
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedOn,
			&i.UpdatedOn,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExerciseTypeById = `-- name: GetExerciseTypeById :one
SELECT id, name, created_on, updated_on FROM exercise_types 
WHERE id = ?1
`

func (q *Queries) GetExerciseTypeById(ctx context.Context, id string) (ExerciseType, error) {
	row := q.db.QueryRowContext(ctx, getExerciseTypeById, id)
	var i ExerciseType
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedOn,
		&i.UpdatedOn,
	)
	return i, err
}
