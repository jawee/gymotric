// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package repository

import (
	"context"
)

const createUserAndReturnId = `-- name: CreateUserAndReturnId :one
INSERT INTO users (
  id, username, password, created_on, updated_on
) VALUES (
  ?1, ?2, ?3, ?4, ?5
)
RETURNING id
`

type CreateUserAndReturnIdParams struct {
	ID        string `json:"id"`
	Username  string `json:"username"`
	Password  string `json:"password"`
	CreatedOn string `json:"created_on"`
	UpdatedOn string `json:"updated_on"`
}

func (q *Queries) CreateUserAndReturnId(ctx context.Context, arg CreateUserAndReturnIdParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createUserAndReturnId,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.CreatedOn,
		arg.UpdatedOn,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getUserByUsernameAndPassword = `-- name: GetUserByUsernameAndPassword :one
SELECT id, username, password, created_on, updated_on FROM users 
WHERE username = ?1 and password = ?2
`

type GetUserByUsernameAndPasswordParams struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) GetUserByUsernameAndPassword(ctx context.Context, arg GetUserByUsernameAndPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsernameAndPassword, arg.Username, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedOn,
		&i.UpdatedOn,
	)
	return i, err
}
